/*
The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
Let us list the factors of the first seven triangle numbers:
 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.
What is the value of the first triangle number to have over five hundred divisors?

This is a brute force method, I'm going to try to improve it later.
I s
*/

#include <iostream>
#include <vector>
int main(){

    unsigned long long trinum = 1;
    std::vector<unsigned long long>factors;

    for(int b = 2; factors.size() < 500; ++b){
        trinum += b;
        factors.clear();
        //This check's for divisors of the trinum's
        //'a' is a divisor, and so is it's oppisite, trinum / a;
        for(unsigned long long a = 1; a*a < trinum; a++)
            if(trinum % a == 0){
                factors.push_back(a);
                factors.push_back(trinum / a);
            }
    }
    std::cout << trinum;
}
